<?php

declare(strict_types=1);

namespace Krajcik\DataBuilder\CodeCompiler;

use Exception;
use Faker\Generator;
use Krajcik\DataBuilder\Dto\BuilderToGenerateDto;
use Krajcik\DataBuilder\Dto\Configuration;
use Krajcik\DataBuilder\PathResolver;
use Krajcik\DataBuilder\Reflection\EntityColumn;
use Krajcik\DataBuilder\Utils\DbHelper;
use Krajcik\DataBuilder\Utils\PropertyNameResolver;
use Krajcik\DataBuilder\Utils\Strings;
use Nette\Database\Context;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpNamespace;

final class FactoryCodeCompiler
{
    private PropertyNameResolver $propertyNameResolver;

    public function __construct(
        private ?Context $db,
        private PathResolver $pathResolver,
        private Configuration $configuration,
    ) {
        $this->propertyNameResolver = new PropertyNameResolver();
    }

    public function precompile(
        BuilderToGenerateDto $data,
    ): ClassType {
        $namespace = new PhpNamespace(sprintf('%s\%s', $this->configuration->getNamespace(), $data->getClassName()));
        $namespace->addUse(Generator::class);

        $class = new ClassType($this->pathResolver->createFactoryClassName($data->getClassName()), $namespace);
        $class->setFinal();
        $class->addComment(sprintf('Automatically generated by %s.', Strings::withRootNamespace(__CLASS__)));

        $class->addProperty('generator')
            ->setPrivate()
            ->setType(Generator::class);

        return $class;
    }

    public function compile(
        BuilderToGenerateDto $data,
    ): ClassType {
        $class = $this->precompile($data);

        $this->createConstructMethod($class);
        $this->createDefaultParametersMethod($class, $data);

        return $class;
    }

    private function createConstructMethod(
        ClassType $class,
    ): void {
        $method = $class->addMethod('__construct');
        $method
            ->setPublic()
            ->addParameter('generator')
            ->setType(Generator::class);

        $method->addBody('$this->generator = $generator;');
    }

    private function createDefaultParametersMethod(
        ClassType $class,
        BuilderToGenerateDto $data,
    ): void {
        $method = $class->addMethod('createDefaultParameters')
            ->setPublic()
            ->setReturnType($this->pathResolver->getParameterClassName($data->getClassName()));

        assert($this->db instanceof Context);
        $columns = $this->db->getStructure()->getColumns($data->getTableName());

        $method->addBody(sprintf('        return new %sParameters(', $data->getClassName()));
        foreach (DbHelper::sortTableColumns($columns) as $col) {
            $col = new EntityColumn($col, $data->getTableName());
            $colName = $this->propertyNameResolver->getPropertyName($col, $data);
            assert(is_string($colName) === true);

            $method->addBody(sprintf(
                '    %s: %s,',
                $colName,
                $this->getDefaultValue($col),
            ));
        }
        $method->addBody(');');
    }

    private function getDefaultValue(
        EntityColumn $column,
    ): string {
        return match (true) {
            $column->getName() === 'id' => 'null',
            $column->getName() === 'date_add' => 'new \DateTime()',
            $column->getName() === 'id_creator' => '1',
            $column->isEnum() === true => sprintf('\'%s\'', $column->getEnumList()[0]),
            $column->hasDefault() === true && $column->isDateOrTime() === true => $this->getDefaultDateValue($column),
            $column->hasDefault() === true && $column->isBool() === true => $column->getDefault() ? 'true' : 'false',
            $column->hasDefault() === true => $column->isString() === true
                ? sprintf('\'%s\'', $column->getDefault())
                : $column->getDefault(),
            Strings::contains($column->getName(), 'first_name') === true || Strings::contains(
                $column->getName(),
                'firstname',
            ) === true => '$this->generator->firstName()',
            Strings::contains($column->getName(), 'last_name') === true || Strings::contains(
                $column->getName(),
                'lastname',
            ) === true => '$this->generator->lastName()',
            $column->isString() === true && Strings::contains($column->getName(), 'name') === true
                => $this->createName($column),
            $column->isNullable() === true => 'null',
            $column->isString() === true => $this->createString($column),
            $column->isBool() === true => 'true',
            $column->isFloat() === true => '0.0',
            $column->isInteger() && $column->isRelation() === true => '1',
            $column->isInteger() === true => $this->createInteger($column),
            $column->isDate() === true || $column->isDateOrTime(
            ) === true => 'new \DateTime(\App\Compiler\Builder\Utils::DEFAULT_DATE)',
            $column->isJson() === true => "'{}'",
            default => $column->getNativeType() ?? throw new Exception('Native type is null'),
        };
    }

    private function createString(
        EntityColumn $column,
    ): string {
        $size = $column->getSize() ?? 20;
        $size = max($size, 5);
        if ($column->isUnique() === true) {
            return sprintf('$this->generator->unique()->text(%d)', $size);
        }

        return sprintf('$this->generator->text(%d)', $size);
    }

    private function createName(
        EntityColumn $column,
    ): string {
        if ($column->isUnique() === true) {
            return '$this->generator->unique()->name()';
        }

        return '$this->generator->name()';
    }

    private function createInteger(
        EntityColumn $column,
    ): string {
        if ($column->isUnique() === true) {
            return sprintf('$this->generator->unique()->randomNumber(%d)', $column->getSize() ?? 5);
        }

        return sprintf('$this->generator->randomNumber(%d)', $column->getSize() ?? 5);
    }

    private function getDefaultDateValue(EntityColumn $column): string
    {
        $default = $column->getDefault();
        if ($default === 'current_timestamp()') {
            return 'new \\DateTime()';
        }

        return sprintf(
            'new \\DateTime(\'%s\')',
            $default,
        );
    }

}
